{"ast":null,"code":"var _jsxFileName = \"/Users/Tina/Downloads/01-starting-project/src/App.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\nimport React, { useContext } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\"; // import AuthContext from \"./store/auth-context\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  useContext(AuthContext); // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // useEffect(() => {\n  //   const storedLogInInfo = localStorage.getItem(\"isLoggedIn\");\n  //   // reaching out to local storage, call getItem and search for isLoggedIn info\n  //   //  returns info on isLoggedIn\n  //   if (storedLogInInfo === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n  // // call useEffect, pass 2 areguments\n  // // 1st - anonomouse arrow function\n  // // 2nd - array of dependancies, the functions will only run if the dependancies\n  // // change, and when the app first runs\n  // // because we left the array empty, this will only run when we load the app\n  // // this avoids an infinite loop\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Tina/Downloads/01-starting-project/src/App.js"],"names":["React","useContext","Login","Home","MainHeader","AuthContext","App","isLoggedIn","loginHandler","logoutHandler"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB,C,CACA;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACbL,EAAAA,UAAU,CAACI,WAAD,CAAV,CADa,CAEb;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACG,CAACE,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEC;AAAhB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEGD,UAAU,iBAAI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEE;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAzCQH,G;;KAAAA,G;AA2CT,eAAeA,GAAf","sourcesContent":["// import React, { useState, useEffect } from \"react\";\nimport React, { useContext } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\n// import AuthContext from \"./store/auth-context\";\n\nfunction App() {\n  useContext(AuthContext);\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // useEffect(() => {\n  //   const storedLogInInfo = localStorage.getItem(\"isLoggedIn\");\n  //   // reaching out to local storage, call getItem and search for isLoggedIn info\n  //   //  returns info on isLoggedIn\n\n  //   if (storedLogInInfo === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n  // // call useEffect, pass 2 areguments\n  // // 1st - anonomouse arrow function\n  // // 2nd - array of dependancies, the functions will only run if the dependancies\n  // // change, and when the app first runs\n  // // because we left the array empty, this will only run when we load the app\n  // // this avoids an infinite loop\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  return (\n    <React.Fragment>\n      <MainHeader />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}